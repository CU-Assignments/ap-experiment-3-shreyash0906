### Aim: To merge k sorted linked lists into a single sorted linked list while maintaining the sorted order.

### Objective: 
To efficiently merge multiple sorted linked lists into one.
To optimize the merging process using techniques like a min-heap (priority queue) or divide-and-conquer.
To ensure minimal time complexity, ideally O(N log k), where N is the total number of nodes across all lists.
To enhance problem-solving skills related to linked list manipulation and efficient merging strategies.

### Code:
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) return nullptr;
        
        auto cmp = [](ListNode* a, ListNode* b) {
            return a->val > b->val;  
        };
        
        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> pq(cmp);
        
        
        for (auto list : lists) {
            if (list != nullptr) {
                pq.push(list);
            }
        }
        
        ListNode* dummy = new ListNode(0);  
        ListNode* current = dummy;
        

        while (!pq.empty()) {
            ListNode* node = pq.top();
            pq.pop();
            
            current->next = node;
            current = current->next;
            
  
            if (node->next != nullptr) {
                pq.push(node->next);
            }
        }
        
        return dummy->next; 
    }
};
